#!/usr/bin/env bash
: "${PATH_BASE:="$(git rev-parse --show-toplevel)"}" 
ACTION=''
PIK_DEVICE=''
SWITCH_SD_UMOUNT=false
SWITCH_SSH_KEY=true

action_update_kubeconfig() {
  local ip_master_0=$(cat ${PATH_BASE}/ansible/hosts.ini  | grep "ansible-host" | sed "s/=/ /g" | awk '{print $1 " " $3}' | grep k3s-master-0 | awk '{print $2}')
  scp \
    -o "StrictHostKeyChecking no" \
    -i "${PATH_BASE}"/.secrets/id_rsa_pik_no_pass \
    root@${ip_master_0}:/etc/rancher/k3s/k3s.yaml \
    ${PATH_BASE}/.secrets/
  sed -i 's/127.0.0.1/'${ip_master_0}'/g' .secrets/k3s.yaml
}

action_ansible() {
  cd "${PATH_BASE}"/ansible
  ansible-playbook \
    -i hosts.ini \
    --user root \
    --flush-cache \
    --private-key "${PATH_BASE}"/.secrets/id_rsa_pik_no_pass \
    playbook.yaml
}

# https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s
# [2] PROVSISION SERVER
# * [ ] provsion master https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s
action_pi_init() {
  local interface=$(ip addr | grep -v "^  " | awk '{print $2}' | rev | cut -c 2- | rev | fzf)
  [[ -z "${interface}" ]] && echo "Aborted!" && exit
  local ip=$(sudo arp-scan -I "${interface}" -localnet -plain | fzf | awk '{print $1}')
  [[ -z "${ip}" ]] && echo "Aborted!" && exit
  ssh -o "StrictHostKeyChecking no" -t root@"${ip}" "curl -sfL https://get.k3s.io | sh -"

}

# --- prepare a sd card for a headless start
# * tut https://carpie.net/articles/headless-pi-with-static-ip-wired-edition
# * rasbian https://www.raspberrypi.org/downloads/raspbian
# * list devices https://www.lifewire.com/how-to-use-linux-to-find-the-names-of-the-devices-on-your-computer-4078068
# [1] SETUP PI
# * [ ] add ssh pub key to sd card
# * [ ] change hostname https://www.cyberciti.biz/faq/linux-change-hostname/ 
# * [ ] change password
action_sd_setup() {

  # --- [set] vars
  local path_boot="${PATH_BASE}"/.tmp/mounts/boot
  local path_rootfs="${PATH_BASE}"/.tmp/mounts/rootfs
  local file_interface=${path_rootfs}/etc/dhcpcd.conf
  local device=$(lsblk --noheadings --raw -o NAME,MOUNTPOINT | awk '$1~/[[:digit:]]/ && $2 == ""' | grep "mmcblk0" | fzf)
  local interface=$(ip addr | grep -v "^  " | awk '{print $2}' | rev | cut -c 2- | rev | fzf)
  local hosts=$(cat ${PATH_BASE}/ansible/hosts.ini  | grep "ansible-host" | sed "s/=/ /g" | awk '{print $1 " " $3}')
  local host=$(cat ${PATH_BASE}/ansible/hosts.ini  | grep "ansible-host" | sed "s/=/ /g" | awk '{print $1 " " $3}' | fzf)
  local host_ip=$(echo ${host} | awk '{print $2}' )
  local host_name=$(echo ${host} | awk '{print $1}' )
  local ip_dhcp=$(ip route | grep ${interface} | grep default | awk '{print $3}')
  local ip_first_3=$(echo ${ip_dhcp} | head -c 11)
  local file_image
  local partition_count=$(lsblk --noheadings --raw -o NAME,MOUNTPOINT | awk '$1~/[[:digit:]]/ && $2 == ""' | grep ${device} | wc -l)
  local images_count=$(find images -name '*.img' -type f | wc -l)

  # --- [log]
  echo "partition_count: ${partition_count}" 
  echo "file_image: ${file_image}"
  echo "device: ${device}" 

  # --- [umount]
  sudo umount -f -l "${path_rootfs}"
  sudo umount -f -l "${path_boot}"

  # --- [mkdir] images
  mkdir -p images
  rm -rf "${path_boot}" 
  rm -rf "${path_rootfs}" 
  mkdir -p "${path_boot}" 
  mkdir -p "${path_rootfs}" 

  # --- [cd] pb 
  cd "${PATH_BASE}" 

  # --- [check] images existant
  [ "${images_count}" == 0 ] && echo "No image existant. Download one at https://www.raspberrypi.org/downloads/raspbian!" && exit

  # --- [set] image file
  file_image=$(find images -name '*.img' -type f | fzf)
  [ -z "${file_image}" ] && echo "No image choosen. Aborted!" && exit

  # --- [set] device 
  [ -z "${device}" ] && echo "No device choosen. Aborted!" && exit

  # --- [check] partitions exist on device and ask if they should be deleted
  local partitions=$(_device_get_partitions "${device}")
  if [[ "${partition_count}" > 1 ]]; then
    read -p "Do you want to delete the partitions? (yY)" -n 1 -r
    echo    # (optional) move to a new line
    if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
      sudo wipefs -a /dev/${device}
    fi
  fi

  # --- [write] image to sd card 
  read -p "Do you want to copy the image to device ${device}? (yY)" -n 1 -r && echo
  if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
    _dd ${device} ${file_image} 
  fi

  # --- [mount] sd card partitions seperately
  mkdir -p "${path_boot}" "${path_rootfs}" 
  # remove surrounding whitespace characters
  device="${device#"${device%%[![:space:]]*}"}"
  device="${device%"${device##*[![:space:]]}"}"   
  partitions=$(_device_get_partitions "${device}")
  while IFS= read -r partition; do
      if [ "${partition}" = "p1" ]; then
        echo "- mount ${partition} to ${path_boot}"
        sudo mount /dev/${device}p1 "${path_boot}" 
      fi 
      if [ "${partition}" = "p2" ]; then
        echo "- mount ${partition} to ${path_rootfs}"
        sudo mount /dev/${device}p2 "${path_rootfs}" 
      fi 
  done <<< "$partitions"

  # --- [config] ssh
  # * https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md
  sudo touch "${path_boot}"/ssh
  sudo mkdir -p "${path_rootfs}"/home/pi/.ssh
  sudo cp "${PATH_BASE}"/.secrets/id_rsa_pik_no_pass.pub "${path_rootfs}"/home/pi/.ssh/authorized_keys
  sudo mkdir -p "${path_rootfs}"/root/.ssh
  sudo cp "${PATH_BASE}"/.secrets/id_rsa_pik_no_pass.pub "${path_rootfs}"/root/.ssh/authorized_keys

  # --- [config] dhcp 
  echo "interface eth0" | sudo tee -a "${file_interface}"
  echo "static ip_address=${host_ip}/24" | sudo tee -a "${file_interface}"
  echo "static routers=${ip_dhcp}" | sudo tee -a "${file_interface}"
  echo "static domain_name_servers=${ip_dhcp}" | sudo tee -a "${file_interface}"

  # --- [config] /etc/hosts 
  while IFS= read -r ansible_host; do
    local ip=$(echo "${ansible_host}" | awk '{print $2}' )
    local hostname=$(echo "${ansible_host}" | awk '{print $1}' )
    echo -e "${ip}\\${hostname}" | sudo tee -a /etc/hosts
  done <<< "$hosts"

  # --- [config] /etc/hosts 
  local file_hostname="${path_rootfs}"/etc/hostname
  sudo sh -c "echo ${host_name} > ${file_hostname}"

  # --- [sync] the written files 
  sync

  # --- [umount] the partitions
  if [[ "${SWITCH_SD_UMOUNT}" = "true" ]]; then
    echo "[unmounting]"
    sudo umount -f -l "${path_rootfs}"
    sudo umount -f -l "${path_boot}"
  else
    read -p "Do you want to unmount the partitions? (yY)" -n 1 -r
    if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
      echo "[unmounting]"
      sudo umount -f -l "${path_rootfs}"
      sudo umount -f -l "${path_boot}"
    fi
  fi 

  # --- [log]  
  echo "FINISHED" 

}

action_ssh_connect() {
  local host=$(cat ${PATH_BASE}/ansible/hosts.ini  | grep "ansible-host" | sed "s/=/ /g" | awk '{print $1 " " $3}' | fzf)
  local host_ip=$(echo ${host} | awk '{print $2}' )
  [[ -z "${host_ip}" ]] && echo "Aborted!" && exit
  if [[ "${SWITCH_SSH_KEY}" = "true" ]]; then
    echo "key" 
    ssh -i "${PATH_BASE}"/.secrets/id_rsa_pik_no_pass -o "StrictHostKeyChecking no" pi@"${host_ip}"
  else
    ssh -o "StrictHostKeyChecking no" pi@"${host_ip}"
  fi
}

action_ssh_connect_arp() {
  local interface=$(ip addr | grep -v "^  " | awk '{print $2}' | rev | cut -c 2- | rev | fzf)
  [[ -z "${interface}" ]] && echo "Aborted!" && exit
  local ip=$(sudo arp-scan -I "${interface}" -localnet -plain | fzf | awk '{print $1}')
  [[ -z "${ip}" ]] && echo "Aborted!" && exit
  if [[ "${SWITCH_SSH_KEY}" = "true" ]]; then
    ssh -i "${PATH_BASE}"/.secrets/id_rsa_pik -o "StrictHostKeyChecking no" pi@"${ip}"
  else
    ssh -o "StrictHostKeyChecking no" pi@"${ip}"
  fi
  # ssh -o "StrictHostKeyChecking no" -t root@"${ip}" "calsecs_glo_install"
}

action_sd_umount() {
  local path_boot="${PATH_BASE}"/.tmp/mounts/boot
  local path_rootfs="${PATH_BASE}"/.tmp/mounts/rootfs
  mkdir -p "${path_boot}" 
  mkdir -p "${path_rootfs}" 
  local device=$(lsblk --noheadings --raw -o NAME,MOUNTPOINT | awk '$1~/[[:digit:]]/ && $2 == ""' | grep "mmcblk" | fzf)
  local partitions=$(_device_get_partitions "${device}")
  device="${device#"${device%%[![:space:]]*}"}"
  device="${device%"${device##*[![:space:]]}"}"   
  echo "device: ${device}" 
  echo "partitions: ${partitions}" 
  while IFS= read -r partition; do
      if [ "${partition}" = "p1" ]; then
        echo "- umount ${partition} to ${path_boot}"
        sudo umount /dev/"${device}"p1 "${path_boot}" 
      fi 
      if [ "${partition}" = "p2" ]; then
        echo "- umount ${partition} to ${path_rootfs}"
        sudo umount /dev/"${device}"p2 "${path_rootfs}" 
      fi 
  done <<< "$partitions"
}

action_sd_mount() {
  local path_boot="${PATH_BASE}"/.tmp/mounts/boot
  local path_rootfs="${PATH_BASE}"/.tmp/mounts/rootfs
  mkdir -p "${path_boot}" 
  mkdir -p "${path_rootfs}" 
  local device=$(lsblk --noheadings --raw -o NAME,MOUNTPOINT | awk '$1~/[[:digit:]]/ && $2 == ""' | grep "mmcblk" | fzf)
  local partitions=$(_device_get_partitions "${device}")
  device="${device#"${device%%[![:space:]]*}"}"
  device="${device%"${device##*[![:space:]]}"}"   
  echo "device: ${device}" 
  echo "partitions: ${partitions}" 
  while IFS= read -r partition; do
      if [ "${partition}" = "p1" ]; then
        echo "- mount ${partition} to ${path_boot}"
        sudo mount /dev/"${device}"p1 "${path_boot}" 
      fi 
      if [ "${partition}" = "p2" ]; then
        echo "- mount ${partition} to ${path_rootfs}"
        sudo mount /dev/"${device}"p2 "${path_rootfs}" 
      fi 
  done <<< "$partitions"
}

_get_free_ip() {
  local interface=enp0s31f6
  local ip_dhcp=192.168.178.1
  local ip_first_3=$(echo ${ip_dhcp} | head -c 11)
  echo "interface: ${interface}" 
  echo "ip_first_3: ${ip_first_3}" 
  # sudo arp-scan -I ${interface} --localnet --plain
  local ips_used=$(sudo arp-scan -I ${interface} --localnet --plain | awk '{print $1}')
  echo "ips_used: ${ips_used}" 
  echo "free ips"
  for (( i = 1; i < 256; i++ )); do
    local ip_to_check="${ip_first_3}"."${i}"
    if [[ "${ips_used}" != *"${ip_to_check}"* ]]; then
      echo ${ip_to_check} 
    fi
  done | fzf

}

_interface_get_dhcp_ip() {
  local interface=$(ip addr | grep -v "^  " | awk '{print $2}' | rev | cut -c 2- | rev | fzf)
  local ip_dhcp=$(ip route | grep ${interface} | grep default | awk '{print $3}')
  echo ${ip_dhcp}
}

_dd() {
  echo "device: ${device}" 
  echo "file_image: ${file_image}" 
  sudo umount /dev/"${1}" 2>/dev/null
  cd ${PATH_BASE} 
  sudo dd if=${2} of=/dev/${1} bs=16M
}

_device_get_partitions() {
  # remove leading whitespace characters
  local device="${1#"${1%%[![:space:]]*}"}"
  # remove trailing whitespace characters
  device="${device%"${device##*[![:space:]]}"}"   
  local partitions=$(
    lsblk | 
      tail -n +2 | 
      grep -v "${device} " | 
      grep "${device}" | 
      awk '{print $1}' | 
      xargs -I {} sh -c "p={}; echo \${p:2}" |
      xargs -I {} sh -c "p={}; echo \${p:${#device}}"
  )
  echo "${partitions}"
}

_remove_partitions() {
  # sudo sfdisk -l /dev/"${device}" | grep 'dev' | grep -v 'Disk' | awk '{print $1}' | cut -d "/" -f 3 | xargs -I {} sh -c "partition={}; echo \${partition#\"\\${device}\"}"
  local device_choosen="${PIK_DEVICE}" 
  if [[ -z "${PIK_DEVICE}" ]]; then
    local devices=$(lsblk | tail -n +2 | grep mmcblk | grep -Fv -e "└" -e "├")
    device_choosen=$(echo "${devices}" | fzf | awk '{print $1}')
  fi 
  echo "device_choosen: ${device_choosen}" 
  local device_len= 
  local partitions=$(
    lsblk | 
      tail -n +2 | 
      grep -v "${device_choosen} " | 
      grep "${device_choosen}" | 
      awk '{print $1}' | 
      xargs -I {} sh -c "p={}; echo \${p:2}" |
      xargs -I {} sh -c "p={}; echo \${p:${#device_choosen}}"
  )
  echo -e "partitions: \n${partitions}" 

  # [ -z "${device}" ] && echo "No device choosen. Aborted!" && exit
  # sudo sfdisk -l /dev/"${device}" | grep 'dev' | grep -v 'Disk' | awk '{print $1}' | cut -d "/" -f 3
}

# --- calsecs_help
_help() {
  cat << EOF
pic <ACTION> <OPTIONS>
  actions:
    h: help
    I: init pi
    S: setup pi sd-card
    T: test
  options:
    d: device name
EOF
}

# --- check if option passed
[[ -z "${1}" ]] && _help
while getopts "d:hkmsuAKMSTU" opt; do
  case ${opt} in

    # --- OPTIONS
    d) PIK_DEVICE=$OPTARG ;;
    k) SWITCH_SSH_KEY=false ;;
    s) ACTION=action_ssh_connect ;;
    u) SWITCH_SD_UMOUNT=true ;;

    # --- ACTIONS
    h) ACTION=_help ;;
    A) ACTION=action_ansible ;;
    K) ACTION=action_update_kubeconfig ;;
    M) ACTION=action_sd_mount ;;
    U) ACTION=action_sd_umount ;;
    S) ACTION=action_sd_setup ;;
    # T) ACTION=_dd ;;
    # T) ACTION=_remove_partitions; PIK_DEVICE=mmcblk0 ;;
    T) ACTION=_get_free_ip ;;

    # --- MISC
    \? ) echo "Invalid option: $OPTARG" 1>&2 ;;
    : ) echo "Invalid option: $OPTARG requires an argument" 1>&2 ;;
  esac
done
shift $((OPTIND -1))
[[ -n "${ACTION}" ]] && ${ACTION}
